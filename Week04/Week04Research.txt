`Java 4: Research
The following utilized w3schools.com, geeksforgeeks.org and docs.oracle.com as resources


	I. Select five (5) methods from the String Java Documentation and describe the following for each: 

(a) What is the method signature for each method?

(b) What does each method do? 

(c) Why would this method be useful (how could you use it)?  Give an example.


1. charAt()
(a) Signature: public char charAt(int index)

(b) The charAt string method is used to retrieve a character at a specific position (by index) within a string. 

(c) This string method is useful when wanting to iterate through a string with a loop and have access to each character in a string individually. The following example shows that I can call on a character using a specific position by calling on it's indexed location as well as I can iterate through a word and access each character and print individually to the console:

		String message = "Julie Lewis";

			// Access the first character (J in this example)
		char firstChar = message.charAt(0);
		System.out.println(firstChar);
		
			// Iterate through the string and print each letter on a new line
		for (int i = 0; i < message.length(); i++) {
		    System.out.println(message.charAt(i));
		}			

__________________________________________________________________

2. endsWith()
(a) Signature: public boolean endsWith(String chars)

(b) The endsWith string method checks whether a string ends with a specific character(s). It is a Boolean that will return true or false. 

(c) This string method is useful when wanting to check for a specific file type such as pdf or doc. 

		String filename = "document.pdf";

		if (filename.endsWith(".pdf")) {
   		 System.out.println("The file is a PDF document.");
		} else {
    		 System.out.println("The file is not a PDF document.");
		}
__________________________________________________________________

3. indexOf()
(a) Signature:

(b) The indexOf() string method will return the index of the first occurrence of a specified character in a string.

(c) One thing this string method is useful for is when looking for the index of a specific element in a List.

		List<String> cars = new ArrayList<>;
		cars.add("Mercedes");
		cars.add("Mustang");
		cars.add("Tahoe");
		int index = cars.indexOf("Mustang"); // index will be 1

__________________________________________________________________

4. length()
(a) Signature: public int length()

(b) The length() string method will return the length of a string (numerical value) 

(c) This string method is useful when iterating over elements using loops.

		int[] numbers = {1, 2, 3, 4, 5};

		for (int i = 0; i < numbers.length; i++) {
   		   int number = numbers[i];
   		   System.out.println(number); 
 		}
__________________________________________________________________

5. trim()
(a) Signature: public String trim()

(b) The trim() string method will trim white space from both ends of a string (but does not change the original string).

(c) This method is useful in cleaning up user input/data, helping to keep the input free from unnecessary spaces. It is also useful to ensure accurate string comparisons and to be able to achieve accuracy when output text needs specific alignment or to be presented in a specific format.

		public static void main(String[] args) {

		String string1 = "     Too much of anything is the beginning of a mess.      ";//original with white space 											      // before and after quote.
		String string2 = string1.trim(); // Applying string method to original string
	
		System.out.println("Original String: '" + string1 + "'"); // Print original and trimmed for comparison 
		System.out.println("Trimmed String: '" + string2 + "'");
		}

__________________________________________________________________

	
	II. Write Java code that does the following:

(a) Write a line of code that shows how you would instantiate an ArrayList of String.
	
	ArrayList<String> catBreeds = new ArrayList<>();
	// Instantiation of an ArrayList of String called catBreeds.
	

(b) Write a line of code that shows how you would instantiate a HashSet of StringBuilder.

	HashSet<StringBuilder> catBreedsSet = new HashSet<>();
	// Instantiation of a HashSet of type StringBuilder with HashSet variable name catBreedsSet.

(c) Write a line of code that shows how you would instantiate a HashMap of String, String.

	HashMap<String, String> catMap = new HashMap<>();
	// Instantiation of HashMap named catMap. The first String indicating the type of keys the map will hold 
       //  and the second String indicating the type of values. (Both are of type Strings in this example).









